#if !defined(BDD_APPLY_HASH_HEADER)
#define BDD_APPLY_HASH_HEADER

#include "bdd.h"

typedef struct
{
	bdd_node *nodes[2];
} apply_hash_key;
typedef unsigned int apply_hash;
typedef bdd_node *apply_hash_value;
	
typedef struct apply_hash_item
{
	apply_hash_key key;     // By two source diagram's nodes we quickly search for
	bdd_node *value_node;   // corresponding resulting node already generated by Apply 
	struct apply_hash_item *next;
} apply_hash_item;
typedef apply_hash_item *apply_hash_item_ptr;

typedef struct
{
	int size;
	apply_hash_item_ptr *ptrs;
} apply_hash_table;

// Good possible hash table sizes: 97, 769, 98317, 25165843.
// Generally the bigger hash tables - the faster the search,
// but slower initialization/freeing of hash tables
apply_hash_table *apply_create_hash_table(int size);
void apply_free_hash_table(apply_hash_table *table);
void apply_hash_insert(apply_hash_table *table, bdd_node *node1, bdd_node *node2, 
	                     bdd_node *result_node);
bdd_node *apply_hash_search(apply_hash_table *table, bdd_node *node1, bdd_node *node2);

// apply_hash apply_get_hash(hash_table *table, apply_hash_key *key);
apply_hash apply_get_hash(apply_hash_table *table, bdd_node *node1, bdd_node *node2);


#endif